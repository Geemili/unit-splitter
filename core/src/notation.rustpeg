// DUT Inventory Notation
// ======================
//
// Accepts input like "A=1-50, B=51-100" and returns it as a list of groups
// containing ranges of units.

use group::Group;
use range::Range;

pub parse_units -> Vec<Group>
    = groups:groups { groups }
    / ranges:ranges { vec![ Group::new("".to_string(), ranges) ] }

groups -> Vec<Group>
    = head:group tail:(comma? _? g:group {g})* {
        let mut groups = vec![head];
        groups.extend_from_slice(&tail);
        groups
    }

group -> Group
    = name:group_name "=" ranges:ranges { Group::new(name.to_string(), ranges) }

group_name -> &'input str
    = $("_" / "-" / alpha / digit)+

ranges -> Vec<Range>
    = head:range tail:(comma _? r:range {r})* {
        let mut ranges = vec![head];
        ranges.extend_from_slice(&tail);
        ranges
    }

range -> Range
    = (first:number "-" last:number { Range::new(first, last) })
    / num:number { Range::new(num, num) }

number -> usize
    = n:$(digit+) !alpha { n.parse().unwrap() }

alpha = [a-zA-Z]
digit = [0-9]
comma = ","

whitespace = [ \t\n\r]+
_ = whitespace
